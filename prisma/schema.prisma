// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  pending
  published
  rejected
}

enum EventType {
  seminar
  webinar
  meetup
  workshop
  other
}

enum UserRole {
  user
  admin
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(user)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  events    Event[]
  favorites Favorite[]

  @@map("users")
}

model Event {
  id             String      @id @default(cuid()) @map("id")
  title          String      @db.Text
  startAt        DateTime    @map("start_at")
  endAt          DateTime    @map("end_at")
  type           EventType
  organizer      String      @db.Text
  place          String      @db.Text
  registerUrl    String      @map("register_url") @db.Text
  fee            Int?
  target         String[]    @db.Text
  description    String?     @db.Text
  imageUrl       String?     @map("image_url") @db.Text
  prefecture     String?     @db.Char(2)
  maxParticipants Int?       @map("max_participants")
  status         EventStatus @default(pending)
  createdBy      String      @map("created_by")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  user      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  favorites Favorite[]

  @@unique([title, startAt])
  @@map("events")
}

model Favorite {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  eventId  String @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("favorites")
} 