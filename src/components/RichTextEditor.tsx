'use client'

import { useState, useRef, useEffect } from 'react'

interface RichTextEditorProps {
  value: string
  onChange: (value: string) => void
  placeholder?: string
  className?: string
}

export default function RichTextEditor({ value, onChange, placeholder, className = '' }: RichTextEditorProps) {
  const editorRef = useRef<HTMLDivElement>(null)
  const [isFocused, setIsFocused] = useState(false)

  // „Ç®„Éá„Ç£„Çø„ÅÆÂÜÖÂÆπ„ÇíÊõ¥Êñ∞
  useEffect(() => {
    if (editorRef.current && editorRef.current.innerHTML !== value) {
      editorRef.current.innerHTML = value
    }
  }, [value])

  // ÂÜÖÂÆπÂ§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜ
  const handleInput = () => {
    if (editorRef.current) {
      onChange(editorRef.current.innerHTML)
    }
  }

  // Êõ∏ÂºèË®≠ÂÆö„Éú„Çø„É≥„ÅÆÂá¶ÁêÜ
  const formatText = (command: string, value?: string) => {
    document.execCommand(command, false, value)
    editorRef.current?.focus()
    handleInput()
  }

  // „ÉÑ„Éº„É´„Éê„Éº„Éú„Çø„É≥
  const ToolbarButton = ({ command, icon, title, className = '' }: {
    command: string
    icon: string
    title: string
    className?: string
  }) => (
    <button
      type="button"
      onClick={() => formatText(command)}
      title={title}
      className={`p-2 rounded hover:bg-gray-100 transition-colors ${className}`}
    >
      <span dangerouslySetInnerHTML={{ __html: icon }} />
    </button>
  )

  return (
    <div className={`border border-gray-300 rounded-lg overflow-hidden ${className}`}>
      {/* „ÉÑ„Éº„É´„Éê„Éº */}
      <div className="flex items-center gap-1 p-2 bg-gray-50 border-b border-gray-300">
        <ToolbarButton
          command="bold"
          icon="<strong>B</strong>"
          title="Â§™Â≠ó"
          className="font-bold"
        />
        <ToolbarButton
          command="italic"
          icon="<em>I</em>"
          title="Êñú‰Ωì"
          className="italic"
        />
        <ToolbarButton
          command="underline"
          icon="<u>U</u>"
          title="‰∏ãÁ∑ö"
          className="underline"
        />
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        <ToolbarButton
          command="insertUnorderedList"
          icon="‚Ä¢ „É™„Çπ„Éà"
          title="ÁÆáÊù°Êõ∏„Åç"
        />
        <ToolbarButton
          command="insertOrderedList"
          icon="1. Áï™Âè∑‰ªò„Åç„É™„Çπ„Éà"
          title="Áï™Âè∑‰ªò„Åç„É™„Çπ„Éà"
        />
        <div className="w-px h-6 bg-gray-300 mx-1"></div>
        <ToolbarButton
          command="createLink"
          icon="üîó"
          title="„É™„É≥„ÇØ"
        />
      </div>

      {/* „Ç®„Éá„Ç£„Çø„Ç®„É™„Ç¢ */}
      <div
        ref={editorRef}
        contentEditable
        onInput={handleInput}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        className={`min-h-[120px] p-4 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 ${
          isFocused ? 'bg-white' : 'bg-white'
        }`}
        style={{ 
          whiteSpace: 'pre-wrap',
          wordBreak: 'break-word'
        }}
        data-placeholder={placeholder}
      />
    </div>
  )
}
